{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["SAMPLE_JSON","LOCALSTORAGE_KEY","App","props","loadJson","json","window","localStorage","getItem","JSON","stringify","setState","saveJson","validJson","validateJson","state","setItem","handleChange","e","target","value","this","parse","style","left","position","width","onChange","height","onClick","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0NACMA,EAAc,CAClB,IAAO,EACP,KAAO,EACP,EAAK,SAGDC,EAAmB,WAEJC,E,YACpB,WAAaC,GAAQ,IAAD,8BAClB,4CAAMA,KAqBPC,SAAW,WACT,IAAMC,EAAOC,OAAOC,aAAaC,QAAQP,IAAqBQ,KAAKC,UAAUV,EAAa,KAAM,GAChG,EAAKW,SAAS,CAAEN,UAxBC,EA2BnBO,SAAW,WACT,IAAMC,EAAY,EAAKC,aAAa,EAAKC,MAAMV,MAE1CQ,GAELP,OAAOC,aAAaS,QAClBf,EACAY,IAlCe,EAsCnBI,aAAe,SAAAC,GAAC,OAAI,EAAKP,SAAS,CAChCN,KAAMa,EAAEC,OAAOC,SApCf,EAAKf,KAAO,GAHK,E,kFAOjBgB,KAAKjB,a,mCAGOC,GACZ,IAAIQ,EAEJ,IACEA,EAAYJ,KAAKC,UAAUD,KAAKa,MAAMD,KAAKN,MAAMV,MAAO,KAAM,GAC9D,MAAMa,GACN,MAAMA,EAGR,OAAOL,I,+BA0BP,OACE,yBAAKU,MAAO,CAACC,KAAM,MAAOC,SAAU,WAAYC,MAAM,QACpD,8BAAUC,SAAUN,KAAKJ,aAAcG,MAAOC,KAAKN,MAAMV,KAAMkB,MAAO,CAACK,OAAO,OAAQF,MAAM,SAC5F,6BACA,4BAAQG,QAASR,KAAKT,UAAtB,wBACA,4BAAQiB,QAASR,KAAKjB,UAAtB,0BACR,6E,GApDiC0B,IAAMC,WCGnBC,QACW,cAA7B1B,OAAO2B,SAASC,UAEe,UAA7B5B,OAAO2B,SAASC,UAEhB5B,OAAO2B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.65cfd8e6.chunk.js","sourcesContent":["import React from 'react';\nconst SAMPLE_JSON = {\n  \"one\": 1,\n  \"two\": true,\n  \"3\": \"three\"\n}\n \nconst LOCALSTORAGE_KEY = 'someJson'\n \nexport default class App extends React.Component {\n\tconstructor (props) {\n  \tsuper(props)\n    \n    this.json = {}\n  }\n  \n  componentWillMount () {\n    this.loadJson()\n  }\n \n  validateJson (json) {\n    let validJson\n    \n    try{\n      validJson = JSON.stringify(JSON.parse(this.state.json), null, 2)\n    } catch(e) {\n      throw e\n    }\n    \n    return validJson\n  }\n  \n  loadJson = () => {\n    const json = window.localStorage.getItem(LOCALSTORAGE_KEY) || JSON.stringify(SAMPLE_JSON, null, 2)\n    this.setState({ json })\n  }\n  \n  saveJson = () => {\n    const validJson = this.validateJson(this.state.json)\n    \n    if (!validJson) return;\n    \n    window.localStorage.setItem(\n      LOCALSTORAGE_KEY,\n      validJson\n    )\n  }\n  \n  handleChange = e => this.setState({\n    json: e.target.value\n  })\n\n  \n  \n  render () {\n    return (\n      <div style={{left: \"50%\", position: \"absolute\", width:\"70%\" }}>\n        <textarea onChange={this.handleChange} value={this.state.json} style={{height:\"30vh\", width:\"30%\"}}/>\n        <br/>\n        <button onClick={this.saveJson}>SAVE to LocalStorage</button> \n        <button onClick={this.loadJson}>LOAD from LocalStorage</button>\n<p>save/load JSON data via a React Component</p>\n      </div>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}